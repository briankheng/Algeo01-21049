import java.util.Scanner;

import lib.BalikanAdjoin;
import lib.Cramer;
import lib.Determinant;
import lib.Kofaktor;
import lib.Matrix;
import lib.SPL;

public class Bicubic
{
	public static void main(String[] args)
	{
		bicubic();
	}
	public static double bicubic()
	// Input matrix 4x4, berisi nilai f(i,j) dan nilai (a,b)
	// Output nilai f(a,b)
	{
		// invers matrix untuk -1<=x<=2 dan -1<=y<=2; range titik di antara (0,0) dan (1,1)
		// Scanner sc = new Scanner(System.in);

		// Matrix matrix = new Matrix(16,1);
		// System.out.println("matrix");
		// for (int i = 0; i < 16; i++)
		// {
		// 	double x = sc.nextDouble();
		// 	m.setElmt(i,0,x);
		// }

		long[] matrix = {135, 125, 98, 21, 59, 161, 101, 51, 210, 72, 42, 0, 96, 81, 12, 16};

		double a = 0.5, b = 0.5;



		// double[] constants = {m[4],
		// 					  -m[3]/3-m[4]/2+m[5]-m[6]/6,
		// 					  m[3]/2-m[4]+m[5]/2,
		// 					  -m[3]/6+m[4]/2-m[5]/2+m[6]/6,
		// 					  -m[1]/3-m[5]/2+m[9]-m[13]/6,
		// 					  m[0]/9+m[1]/6-m[2]/3+m[3]/18+m[4]/6+m[5]/4-m[6]/2+m[7]/12-m[8]/3-m[9]/2+m[10]-m[11]/6+m[12]/18+m[13]/12-m[14]/6+m[15]/36,
		// 					  -m[0]/6+m[1]/3-m[2]/6-m[4]/4+m[5]/2-m[6]/4+m[8]/2-m[9]+m[10]/2-m[12]/12+m[13]/6-m[14]/12,
		// 					  m[0]/18-m[]}
		// Matrix invers = new Matrix(16,16);
		// System.out.println("invers");
		// for (int i = 0; i < 16; i++)
		// {
		// 	for (int j = 0; j < 16; j++)
		// 	{
		// 		double x = sc.nextDouble();
		// 		invers.setElmt(i,j,x);
		// 	}
		// }
		// double[][] invers = {{0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		// 				 {0, 0, 0, 0, -1/3, -1/2, 1, -1/6, 0, 0, 0, 0, 0, 0, 0, 0},
		// 				 {0, 0, 0, 0, 1/2, -1, 1/2, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		// 				 {0, 0, 0, 0, -1/6, 1/2, -1/2, 1/6, 0, 0, 0, 0, 0, 0, 0, 0},
		// 				 {0, -1/3, 0, 0, 0, -1/2, 0, 0, 0, 1, 0, 0, 0, -1/6, 0, 0},
		// 				 {1/9, 1/6, -1/3, 1/18, 1/6, 1/4, -1/2, 1/12, -1/3, -1/2, 1, -1/6, 1/18, 1/12, -1/6, 1/36},
		// 				 {-1/6, 1/3, -1/6, 0, -1/4, 1/2, -1/4, 0, 1/2, -1, 1/2, 0, -1/12, 1/6, -1/12, 0},
		// 				 {1/18, -1/6, 1/6, -1/18, 1/12, -1/4, 1/4, -1/12, -1/6, 1/2, -1/2, 1/6, 1/36, -1/12, 1/12, -1/36},
		// 				 {0, 1/2, 0, 0, 0, -1, 0, 0, 0, 1/2, 0, 0, 0, 0, 0, 0},
		// 				 {-1/6, -1/4, 1/2, -1/12, 1/3, 1/2, -1, 1/6, -1/6, -1/4, 1/2, -1/12, 0, 0, 0, 0},
		// 				 {1/4, -1/2, 1/4, 0, -1/2, 1, -1/2, 0, 1/4, -1/2, 1/4, 0, 0, 0, 0, 0},
		// 				 {-1/12, 1/4, -1/4, 1/12, 1/6, -1/2, 1/2, -1/6, -1/12, 1/4, -1/4, 1/12, 0, 0, 0, 0},
		// 				 {0, -1/6, 0, 0, 0, 1/2, 0, 0, 0, -1/2, 0, 0, 0, 1/6, 0, 0},
		// 				 {1/18, 1/12, -1/6, 1/36, -1/6, -1/4, 1/2, -1/12, 1/6, 1/4, -1/2, 1/12, -1/18, -1/12, 1/6, -1/36},
		// 				 {-1/12, 1/6, -1/12, 0, 1/4, -1/2, 1/4, 0, -1/4, 1/2, -1/4, 0, 1/12, -1/6, 1/12, 0},
		// 				 {1/36, -1/12, 1/12, -1/36, -1/12, 1/4, -1/4, 1/12, 1/12, -1/4, 1/4, -1/12, -1/36, 1/12, -1/12, 1/36}};
		
		// double[][] invers = {{0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		// 				 {0, 0, 0, 0, -1.0/3, -1.0/2, 1, -1.0/6, 0, 0, 0, 0, 0, 0, 0, 0},
		// 				 {0, 0, 0, 0, 1.0/2, -1, 1.0/2, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		// 				 {0, 0, 0, 0, -1.0/6, 1.0/2, -1.0/2, 1.0/6, 0, 0, 0, 0, 0, 0, 0, 0},
		// 				 {0, -1.0/3, 0, 0, 0, -1.0/2, 0, 0, 0, 1, 0, 0, 0, -1.0/6, 0, 0},
		// 				 {1.0/9, 1.0/6, -1.0/3, 1.0/18, 1.0/6, 1.0/4, -1.0/2, 1.0/12, -1.0/3, -1.0/2, 1, -1.0/6, 1.0/18, 1.0/12, -1.0/6, 1.0/36},
		// 				 {-1.0/6, 1.0/3, -1.0/6, 0, -1.0/4, 1.0/2, -1.0/4, 0, 1.0/2, -1, 1.0/2, 0, -1.0/12, 1.0/6, -1.0/12, 0},
		// 				 {1.0/18, -1.0/6, 1.0/6, -1.0/18, 1.0/12, -1.0/4, 1.0/4, -1.0/12, -1.0/6, 1.0/2, -1.0/2, 1.0/6, 1.0/36, -1.0/12, 1.0/12, -1.0/36},
		// 				 {0, 1.0/2, 0, 0, 0, -1, 0, 0, 0, 1.0/2, 0, 0, 0, 0, 0, 0},
		// 				 {-1.0/6, -1.0/4, 1.0/2, -1.0/12, 1.0/3, 1.0/2, -1, 1.0/6, -1.0/6, -1.0/4, 1.0/2, -1.0/12, 0, 0, 0, 0},
		// 				 {1.0/4, -1.0/2, 1.0/4, 0, -1.0/2, 1, -1.0/2, 0, 1.0/4, -1.0/2, 1.0/4, 0, 0, 0, 0, 0},
		// 				 {-1.0/12, 1.0/4, -1.0/4, 1.0/12, 1.0/6, -1.0/2, 1.0/2, -1.0/6, -1.0/12, 1.0/4, -1.0/4, 1.0/12, 0, 0, 0, 0},
		// 				 {0, -1.0/6, 0, 0, 0, 1.0/2, 0, 0, 0, -1.0/2, 0, 0, 0, 1.0/6, 0, 0},
		// 				 {1.0/18, 1.0/12, -1.0/6, 1.0/36, -1.0/6, -1.0/4, 1.0/2, -1.0/12, 1.0/6, 1.0/4, -1.0/2, 1.0/12, -1.0/18, -1.0/12, 1.0/6, -1.0/36},
		// 				 {-1.0/12, 1.0/6, -1.0/12, 0, 1.0/4, -1.0/2, 1.0/4, 0, -1.0/4, 1.0/2, -1.0/4, 0, 1.0/12, -1.0/6, 1.0/12, 0},
		// 				 {1.0/36, -1.0/12, 1.0/12, -1.0/36, -1.0/12, 1.0/4, -1.0/4, 1.0/12, 1.0/12, -1.0/4, 1.0/4, -1.0/12, -1.0/36, 1.0/12, -1.0/12, 1.0/36}};

		// double[][] invers = {{0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		// 					 {0, 0, 0, 0, -3, -2, 1, -6, 0, 0, 0, 0, 0, 0, 0, 0},
		// 					 {0, 0, 0, 0, 2, -1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		// 					 {0, 0, 0, 0, -6, 2, -2, 6, 0, 0, 0, 0, 0, 0, 0, 0},
		// 					 {0, -3, 0, 0, 0, -2, 0, 0, 0, 1, 0, 0, 0, -6, 0, 0},
		// 					 {9, 6, -3, 18, 6, 4, -2, 12, -3, -2, 1, -6, 18, 12, -6, 36},
		// 					 {-6, 3, -6, 0, -4, 2, -4, 0, 2, -1, 2, 0, -12, 6, -12, 0},
		// 					 {18, -6, 6, -18, 12, -4, 4, -12, -6, 2, -2, 6, 36, -12, 12, -36},
		// 					 {0, 2, 0, 0, 0, -1, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0},
		// 					 {-6, -4, 2, -12, 3, 2, -1, 6, -6, -4, 2, -12, 0, 0, 0, 0},
		// 					 {4, -2, 4, 0, -2, 1, -2, 0, 4, -2, 4, 0, 0, 0, 0, 0},
		// 					 {-12, 4, -4, 12, 6, -2, 2, -6, -12, 4, -4, 12, 0, 0, 0, 0},
		// 					 {0, -6, 0, 0, 0, 2, 0, 0, 0, -2, 0, 0, 0, 6, 0, 0},
		// 					 {18, 12, -6, 36, -6, -4, 2, -12, 6, 4, -2, 12, -18, -12, 6, -36},
		// 					 {-12, 6, -12, 0, 4, -2, 4, 0, -4, 2, -4, 0, 12, -6, 12, 0},
		// 					 {36, -12, 12, -36, -12, 4, -4, 12, 12, -4, 4, -12, -36, 12, -12, 36}};

		long[][] invers = {{0,            0,           0,          0,            0,   429981696,           0,          0,            0,           0,           0,          0,           0,           0,           0,           0},
                {0,            0,           0,          0,   -143327232,  -214990848,   429981696,  -71663616,            0,           0,           0,          0,           0,           0,           0,           0},
                {0,            0,           0,          0,    214990848,  -429981696,   214990848,          0,            0,           0,           0,          0,           0,           0,           0,           0},
                {0,            0,           0,          0,    -71663616,   214990848,  -214990848,   71663616,            0,           0,           0,          0,           0,           0,           0,           0},
                {0,   -143327232,           0,          0,            0,  -214990848,           0,          0,            0,   429981696,           0,          0,           0,   -71663616,           0,           0},
         {47775744,     71663616,  -143327232,   23887872,     71663616,   107495424,  -214990848,   35831808,   -143327232,  -214990848,   429981696,  -71663616,    23887872,    35831808,   -71663616,    11943936},
        {-71663616,    143327232,   -71663616,          0,   -107495424,   214990848,  -107495424,          0,    214990848,  -429981696,   214990848,          0,   -35831808,    71663616,   -35831808,           0},
         {23887872,    -71663616,    71663616,  -23887872,     35831808,  -107495424,   107495424,  -35831808,    -71663616,   214990848,  -214990848,   71663616,    11943936,   -35831808,    35831808,   -11943936},
                {0,    214990848,           0,          0,            0,  -429981696,           0,          0,            0,   214990848,           0,          0,           0,           0,           0,           0},
        {-71663616,   -107495424,   214990848,  -35831808,    143327232,   214990848,  -429981696,   71663616,    -71663616,  -107495424,   214990848,  -35831808,           0,           0,           0,           0},
        {107495424,   -214990848,   107495424,          0,   -214990848,   429981696,  -214990848,          0,    107495424,  -214990848,   107495424,          0,           0,           0,           0,           0},
        {-35831808,    107495424,  -107495424,   35831808,     71663616,  -214990848,   214990848,  -71663616,    -35831808,   107495424,  -107495424,   35831808,           0,           0,           0,           0},
                {0,    -71663616,           0,          0,            0,   214990848,           0,          0,            0,  -214990848,           0,          0,           0,    71663616,           0,           0},
         {23887872,     35831808,   -71663616,   11943936,    -71663616,  -107495424,   214990848,  -35831808,     71663616,   107495424,  -214990848,   35831808,   -23887872,   -35831808,    71663616,   -11943936},
        {-35831808,     71663616,   -35831808,          0,    107495424,  -214990848,   107495424,          0,   -107495424,   214990848,  -107495424,          0,    35831808,   -71663616,    35831808,           0},
        {11943936,     -35831808,    35831808,  -11943936,    -35831808,   107495424,  -107495424,   35831808,     35831808,  -107495424,   107495424,  -35831808,   -11943936,    35831808,   -35831808,    11943936}};

		Matrix constants = new Matrix(16,1);
		for (int i = 0; i < 16; i++)
		{
			long sum = 0;
			for (int j = 0; j < 16; j++)
			{
				sum += matrix[j] * invers[i][j];
			}
			System.out.print(i+1 + " " + sum);
			double res = (double)sum / 429981696;
			System.out.println(" " + res);
			constants.setElmt(i,0,sum);
		}

		double value = 0;
		for (int i = 0; i < 4; i++)
		{
			for (int j = 0; j < 4; j++)
			{
				double temp = constants.getElmt(i+j,0);

				int ti = i, tj = j;
				while (ti >= 0)
				{
					temp *= a;
					ti--;
				}
				while (tj >= 0)
				{
					temp *= b;
					tj--;
				}

				value += temp;
			}
		}

		System.out.println(value);
		return value;
	}	
}